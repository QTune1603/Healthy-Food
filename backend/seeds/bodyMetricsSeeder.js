const mongoose = require('mongoose');
const dotenv = require('dotenv');
const User = require('../models/User');
const BodyMetrics = require('../models/BodyMetrics');

// Load env vars
dotenv.config();

// Connect to database
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log('MongoDB Connected...');
  } catch (error) {
    console.error('Database connection error:', error);
    process.exit(1);
  }
};

// Utility function ƒë·ªÉ t√≠nh to√°n BMI v√† c√°c ch·ªâ s·ªë
const calculateMetrics = (height, weight, age, gender, activityLevel) => {
  const heightInMeters = height / 100;
  const bmi = weight / (heightInMeters * heightInMeters);

  // T√≠nh BMR (Basal Metabolic Rate)
  let bmr;
  if (gender === 'male') {
    bmr = 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age);
  } else {
    bmr = 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age);
  }

  // T√≠nh calo h√†ng ng√†y d·ª±a tr√™n m·ª©c ƒë·ªô ho·∫°t ƒë·ªông
  const activityMultipliers = {
    sedentary: 1.2,
    light: 1.375,
    moderate: 1.55,
    active: 1.725,
    veryActive: 1.9
  };

  const dailyCalories = bmr * activityMultipliers[activityLevel];

  // Ph√¢n lo·∫°i BMI
  let bmiCategory = '';
  if (bmi < 18.5) {
    bmiCategory = 'Thi·∫øu c√¢n';
  } else if (bmi < 25) {
    bmiCategory = 'B√¨nh th∆∞·ªùng';
  } else if (bmi < 30) {
    bmiCategory = 'Th·ª´a c√¢n';
  } else {
    bmiCategory = 'B√©o ph√¨';
  }

  // T√≠nh c√¢n n·∫∑ng l√Ω t∆∞·ªüng
  const idealWeightMin = 18.5 * (heightInMeters * heightInMeters);
  const idealWeightMax = 24.9 * (heightInMeters * heightInMeters);

  return {
    bmi: Math.round(bmi * 10) / 10,
    bmiCategory,
    bmr: Math.round(bmr),
    dailyCalories: Math.round(dailyCalories),
    idealWeightMin: Math.round(idealWeightMin),
    idealWeightMax: Math.round(idealWeightMax)
  };
};

const seedBodyMetrics = async () => {
  try {
    await connectDB();

    // X√≥a d·ªØ li·ªáu c≈©
    await BodyMetrics.deleteMany({});
    console.log('ƒê√£ x√≥a d·ªØ li·ªáu body metrics c≈©');

    // T√¨m user admin
    let adminUser = await User.findOne({ email: 'admin@healthyfood.com' });
    
    if (!adminUser) {
      console.log('T·∫°o user admin...');
      const bcrypt = require('bcryptjs');
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash('admin123', salt);
      
      adminUser = new User({
        fullName: 'Admin User',
        email: 'admin@healthyfood.com',
        password: hashedPassword,
        phone: '0123456789',
        gender: 'male',
        dateOfBirth: new Date('1990-01-01'),
        address: 'TP.HCM',
        role: 'admin'
      });
      
      await adminUser.save();
      console.log('ƒê√£ t·∫°o user admin');
    }

    // T·∫°o d·ªØ li·ªáu body metrics m·∫´u cho admin (theo th·ªùi gian)
    const sampleData = [
      // 30 ng√†y tr∆∞·ªõc
      {
        height: 170,
        weight: 75,
        age: 25,
        gender: 'male',
        activityLevel: 'moderate',
        notes: 'B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh gi·∫£m c√¢n',
        createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
      },
      // 25 ng√†y tr∆∞·ªõc
      {
        height: 170,
        weight: 74,
        age: 25,
        gender: 'male',
        activityLevel: 'moderate',
        notes: 'Gi·∫£m ƒë∆∞·ª£c 1kg sau 5 ng√†y',
        createdAt: new Date(Date.now() - 25 * 24 * 60 * 60 * 1000)
      },
      // 20 ng√†y tr∆∞·ªõc
      {
        height: 170,
        weight: 72.5,
        age: 25,
        gender: 'male',
        activityLevel: 'active',
        notes: 'TƒÉng c∆∞·ªùng t·∫≠p luy·ªán',
        createdAt: new Date(Date.now() - 20 * 24 * 60 * 60 * 1000)
      },
      // 15 ng√†y tr∆∞·ªõc
      {
        height: 170,
        weight: 71,
        age: 25,
        gender: 'male',
        activityLevel: 'active',
        notes: 'K·∫øt qu·∫£ t·ªët, ti·∫øp t·ª•c duy tr√¨',
        createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000)
      },
      // 10 ng√†y tr∆∞·ªõc
      {
        height: 170,
        weight: 70,
        age: 25,
        gender: 'male',
        activityLevel: 'active',
        notes: 'ƒê·∫°t m·ª•c ti√™u gi·∫£m 5kg',
        createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000)
      },
      // 5 ng√†y tr∆∞·ªõc
      {
        height: 170,
        weight: 69.5,
        age: 25,
        gender: 'male',
        activityLevel: 'moderate',
        notes: 'Gi·∫£m c∆∞·ªùng ƒë·ªô t·∫≠p luy·ªán ƒë·ªÉ duy tr√¨',
        createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)
      },
      // H√¥m nay
      {
        height: 170,
        weight: 69,
        age: 25,
        gender: 'male',
        activityLevel: 'moderate',
        notes: 'Duy tr√¨ c√¢n n·∫∑ng l√Ω t∆∞·ªüng',
        createdAt: new Date()
      }
    ];

    // T·∫°o body metrics v·ªõi t√≠nh to√°n
    for (const data of sampleData) {
      const metrics = calculateMetrics(
        data.height,
        data.weight,
        data.age,
        data.gender,
        data.activityLevel
      );

      const bodyMetrics = new BodyMetrics({
        user: adminUser._id,
        height: data.height,
        weight: data.weight,
        age: data.age,
        gender: data.gender,
        activityLevel: data.activityLevel,
        ...metrics,
        notes: data.notes,
        createdAt: data.createdAt
      });

      await bodyMetrics.save();
    }

    console.log('‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng d·ªØ li·ªáu body metrics m·∫´u');
    console.log(`üìä T·ªïng c·ªông: ${sampleData.length} b·∫£n ghi`);
    console.log('üë§ User: admin@healthyfood.com / admin123');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu:', error);
    process.exit(1);
  }
};

// Ch·∫°y seeder
seedBodyMetrics(); 